import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from src.routes import extract_cities_from_text
from src.responses import greet_user, unknown_request, confirm_direction
from src.kb import yes_no_kb
from src.states import BookingForm

API_TOKEN = "8011978121:AAEKgT0bCuM5bkb4pm8ddUaWQMKEJGyjFYs"

ADMIN_ID = 6132154171

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(level=logging.INFO)

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())


@dp.message(commands=["start", "help"])
async def cmd_start(msg: Message):
    await msg.answer(greet_user())


@dp.message()
async def handle_message(msg: Message, state: FSMContext):
    text = msg.text.strip()
    user_id = msg.from_user.id
    current_state = await state.get_state()

    if current_state == BookingForm.waiting_for_name.state:
        await state.update_data(name=text)
        await msg.answer("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        await state.set_state(BookingForm.waiting_for_phone)
        return

    if current_state == BookingForm.waiting_for_phone.state:
        await state.update_data(phone=text)
        await msg.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–¥–µ–Ω—å –º—ñ—Å—è—Ü—å —Ä—ñ–∫):")
        await state.set_state(BookingForm.waiting_for_date)
        return

    if current_state == BookingForm.waiting_for_date.state:
        await state.update_data(date=text)
        data = await state.get_data()

        name = data.get("name")
        phone = data.get("phone")
        date = data.get("date")
        start = data.get("start")
        end = data.get("end")

        application = (
            f"üöç <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:</b>\n"
            f"üë§ –Ü–º‚Äô—è: <b>{name}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n"
            f"üóì –î–∞—Ç–∞: <b>{date}</b>\n"
            f"üß≠ –ú–∞—Ä—à—Ä—É—Ç: <b>{start} ‚Üí {end}</b>"
        )

        await bot.send_message(ADMIN_ID, application)
        await msg.answer("‚úÖ –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        await state.clear()
        return

    cities = extract_cities_from_text(text.lower())

    if len(cities) == 2:
        start, end = cities
        await state.update_data(start=start, end=end)
        await msg.answer(confirm_direction(start, end), reply_markup=yes_no_kb(start, end))

    elif len(cities) == 1:
        if any(word in text.lower() for word in ["–≤", "–¥–æ"]):
            await msg.answer(f"–ó —è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ –¥–æ <b>{cities[0]}</b>?")
        elif any(word in text.lower() for word in ["–∑", "—ñ–∑"]):
            await msg.answer(f"–£ —è–∫–µ –º—ñ—Å—Ç–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö–∞—Ç–∏ –∑ <b>{cities[0]}</b>?")
        else:
            await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–≤–∞ –º—ñ—Å—Ç–∞ ‚Äî –∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏ üß≠")
    else:
        await msg.answer(unknown_request())


@dp.callback_query(lambda c: c.data.startswith("confirm:"))
async def process_confirm(call: CallbackQuery, state: FSMContext):
    _, start, end = call.data.split(":")
    await state.update_data(start=start, end=end)
    await call.message.answer("üßæ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    await state.set_state(BookingForm.waiting_for_name)
    await call.answer()


@dp.callback_query(lambda c: c.data.startswith("reverse:"))
async def process_reverse(call: CallbackQuery, state: FSMContext):
    _, start, end = call.data.split(":")
    await state.update_data(start=end, end=start)
    await call.message.answer("üßæ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    await state.set_state(BookingForm.waiting_for_name)
    await call.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
